/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkArea.Admin;

import Business.Professor.model.ProfessorDirectory;
import Business.Professor.model.Professor;
import java.awt.CardLayout;
import java.awt.Color;
import java.security.MessageDigest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hemant
 */
public class AdminUpdateProfessorJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AdminUpdateProfessorJPanel
     */
    private JPanel workAreaContainer;
    private ProfessorDirectory professorDirectory;
    private int selectedRowIndex = -1;
    public AdminUpdateProfessorJPanel(JPanel workAreaContainer, ProfessorDirectory professorDirectory) {
        initComponents();
        this.workAreaContainer = workAreaContainer;
        this.professorDirectory = professorDirectory;
        
            // Generate sample professors REMOVE LATER
    professorDirectory.generateSampleProfessors();
    
    
        populateProfessorList();
        
                // Initialize placeholder for password field
    txtProfessorPassword.setText("(Password encrypted)");
    txtProfessorPassword.setEchoChar((char) 0); // To make the placeholder visible as plain text

    txtProfessorPassword.addFocusListener(new java.awt.event.FocusAdapter() {
    public void focusGained(java.awt.event.FocusEvent evt) {
        if (txtProfessorPassword.getText().equals("(Password encrypted)")) {
            txtProfessorPassword.setText("");
            txtProfessorPassword.setEchoChar('*'); // Set to your preferred echo char
        }
    }
    public void focusLost(java.awt.event.FocusEvent evt) {
        if (txtProfessorPassword.getText().isEmpty()) {
            txtProfessorPassword.setText("(Password encrypted)");
            txtProfessorPassword.setEchoChar((char) 0);
        }
    }
    });
    
    
    // Add a ListSelectionListener to the table
    tblProfessor.getSelectionModel().addListSelectionListener(e -> {
        if (!e.getValueIsAdjusting()) {
            selectedRowIndex = tblProfessor.getSelectedRow();
         
if (selectedRowIndex != -1) {
    Professor selectedProfessor = (Professor) tblProfessor.getValueAt(selectedRowIndex, 0);

    // Load data into fields
    txtProfessorName.setText(selectedProfessor.getName());
    txtProfessorAge.setText(selectedProfessor.getAge());
    txtProfessorGender.setText(selectedProfessor.getGender());
    txtProfessorEmail.setText(selectedProfessor.getEmail());
    txtProfessorContact.setText(selectedProfessor.getContact());
    txtProfessorUserName.setText(selectedProfessor.getUsername());
//    txtProfessorPassword.setText(selectedProfessor.getPassword());
    txtProfessorCity.setText(selectedProfessor.getCity());
    txtProfessorState.setText(selectedProfessor.getState());
    txtProfessorCountry.setText(selectedProfessor.getCountry());
    //    txtProfessorRepo.setText(selectedProfessor.getProfessorRepo());


            // Set password field to placeholder text
        txtProfessorPassword.setText("(Password encrypted)");
        txtProfessorPassword.setEchoChar((char) 0); // To make the placeholder visible as plain text
    
}
        }
    });

    }
    
        private boolean isValidPassword(String password) {
    if (password.length() < 6) {
        return false;
    }
    boolean hasNum = password.matches(".*\\d.*");
    boolean hasSpecial = !password.matches("[A-Za-z0-9]*");
    return hasNum && hasSpecial;
}
        
        private void disableAndClearFields() {
        txtProfessorName.setEnabled(false);
        txtProfessorAge.setEnabled(false);
        txtProfessorGender.setEnabled(false);
         txtProfessorEmail.setEnabled(false);
        txtProfessorContact.setEnabled(false);
        txtProfessorUserName.setEnabled(false);
         txtProfessorCity.setEnabled(false);
        txtProfessorState.setEnabled(false);
        txtProfessorCountry.setEnabled(false);
        txtProfessorPassword.setEnabled(false);

    txtProfessorName.setText("");
    txtProfessorAge.setText("");
    txtProfessorGender.setText("");
    txtProfessorEmail.setText("");
    txtProfessorContact.setText("");
    txtProfessorUserName.setText("");
    txtProfessorCity.setText("");
    txtProfessorState.setText("");
    txtProfessorCountry.setText("");
    txtProfessorPassword.setText("");
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProfessor = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        btnDeleteStudent = new javax.swing.JButton();
        txtSearchProf = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        lblProfessorName = new javax.swing.JLabel();
        txtProfessorName = new javax.swing.JTextField();
        txtProfessorAge = new javax.swing.JTextField();
        lblStudentAge = new javax.swing.JLabel();
        lblStudentGender = new javax.swing.JLabel();
        txtProfessorGender = new javax.swing.JTextField();
        lblStudentEmail = new javax.swing.JLabel();
        txtProfessorEmail = new javax.swing.JTextField();
        lblStudentContact = new javax.swing.JLabel();
        txtProfessorContact = new javax.swing.JTextField();
        lblStudentUserName = new javax.swing.JLabel();
        txtProfessorUserName = new javax.swing.JTextField();
        lblStudentPassword = new javax.swing.JLabel();
        lblStudentCity = new javax.swing.JLabel();
        txtProfessorCity = new javax.swing.JTextField();
        lblStudentState = new javax.swing.JLabel();
        txtProfessorState = new javax.swing.JTextField();
        lblStudentCountry = new javax.swing.JLabel();
        txtProfessorCountry = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        txtProfessorRepo = new javax.swing.JTextField();
        lblProfessorRepo = new javax.swing.JLabel();
        txtProfessorPassword = new javax.swing.JPasswordField();

        setBackground(new java.awt.Color(255, 255, 204));

        jLabel1.setBackground(new java.awt.Color(153, 153, 153));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("View Professor Profile");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), null, null));

        tblProfessor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Email ID", "City", "State"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProfessor);
        if (tblProfessor.getColumnModel().getColumnCount() > 0) {
            tblProfessor.getColumnModel().getColumn(1).setResizable(false);
            tblProfessor.getColumnModel().getColumn(2).setResizable(false);
            tblProfessor.getColumnModel().getColumn(3).setResizable(false);
        }

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnDeleteStudent.setText("Delete profile");
        btnDeleteStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteStudentActionPerformed(evt);
            }
        });

        txtSearchProf.setForeground(new java.awt.Color(204, 204, 204));
        txtSearchProf.setText("Enter Name");
        txtSearchProf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchProfFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchProfFocusLost(evt);
            }
        });
        txtSearchProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchProfActionPerformed(evt);
            }
        });

        btnBack.setText("< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblProfessorName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblProfessorName.setText("Name : ");

        txtProfessorName.setEnabled(false);
        txtProfessorName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfessorNameActionPerformed(evt);
            }
        });

        txtProfessorAge.setEnabled(false);
        txtProfessorAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfessorAgeActionPerformed(evt);
            }
        });

        lblStudentAge.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStudentAge.setText("Age : ");

        lblStudentGender.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStudentGender.setText("Gender : ");

        txtProfessorGender.setEnabled(false);
        txtProfessorGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfessorGenderActionPerformed(evt);
            }
        });

        lblStudentEmail.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStudentEmail.setText("E-mail Id : ");

        txtProfessorEmail.setEnabled(false);
        txtProfessorEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfessorEmailActionPerformed(evt);
            }
        });

        lblStudentContact.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStudentContact.setText("Contact Number : ");

        txtProfessorContact.setEnabled(false);
        txtProfessorContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfessorContactActionPerformed(evt);
            }
        });

        lblStudentUserName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStudentUserName.setText("User Name : ");

        txtProfessorUserName.setEnabled(false);
        txtProfessorUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfessorUserNameActionPerformed(evt);
            }
        });

        lblStudentPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStudentPassword.setText("Password : ");

        lblStudentCity.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStudentCity.setText("City : ");

        txtProfessorCity.setEnabled(false);
        txtProfessorCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfessorCityActionPerformed(evt);
            }
        });

        lblStudentState.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStudentState.setText("State : ");

        txtProfessorState.setEnabled(false);
        txtProfessorState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfessorStateActionPerformed(evt);
            }
        });

        lblStudentCountry.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStudentCountry.setText("Country : ");

        txtProfessorCountry.setEnabled(false);
        txtProfessorCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfessorCountryActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        txtProfessorRepo.setEnabled(false);
        txtProfessorRepo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfessorRepoActionPerformed(evt);
            }
        });

        lblProfessorRepo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblProfessorRepo.setText("Reputation Of Professor : ");

        txtProfessorPassword.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnDeleteStudent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addComponent(txtSearchProf, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(194, 194, 194)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblProfessorName, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(36, 36, 36)
                                                .addComponent(txtProfessorName, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblStudentAge, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(36, 36, 36)
                                                .addComponent(txtProfessorAge, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblStudentGender, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(36, 36, 36)
                                            .addComponent(txtProfessorGender, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblStudentEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(36, 36, 36)
                                            .addComponent(txtProfessorEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblStudentContact, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(36, 36, 36)
                                            .addComponent(txtProfessorContact, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblStudentUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(36, 36, 36)
                                            .addComponent(txtProfessorUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblStudentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(227, 227, 227))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(266, 266, 266)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(168, 168, 168)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblStudentCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblStudentState, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblStudentCity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblProfessorRepo, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtProfessorCountry, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                    .addComponent(txtProfessorState, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                    .addComponent(txtProfessorCity, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                    .addComponent(txtProfessorRepo, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                    .addComponent(txtProfessorPassword))))
                        .addGap(0, 332, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtProfessorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblProfessorName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentAge, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProfessorAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentGender, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProfessorGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProfessorEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentContact, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProfessorContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProfessorUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProfessorPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentCity, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProfessorCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentState, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProfessorState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProfessorCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtProfessorRepo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblProfessorRepo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearchProf)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
//        // TODO add your handling code here:
//        //Validation part
//
                   // Check if the search field is empty
    String profSearch = (String) txtSearchProf.getText();
    if(profSearch.isEmpty()){
        JOptionPane.showMessageDialog(null, "Please enter a valid Professor to search.");
        return;
    }
//
   // Search for the professor
   Professor result = professorDirectory.searchProfessor(profSearch);
    if(result == null){
        JOptionPane.showMessageDialog(null, "Professor does not exist.");
        return;
    }
        
//        if(txtSearchProf == null){
//            JOptionPane.showMessageDialog(null, "Professor does not exist!");
//       }
        else{
            txtProfessorName.setText(result.getName());
            txtProfessorAge.setText(result.getAge());
            txtProfessorGender.setText(result.getGender());
            txtProfessorEmail.setText(result.getEmail());
            txtProfessorContact.setText(result.getContact());
            txtProfessorUserName.setText(result.getUsername());
            txtProfessorPassword.setText(result.getPassword());
            txtProfessorCity.setText(result.getCity());
            txtProfessorState.setText(result.getState());
            txtProfessorCountry.setText(result.getCountry());

                txtProfessorPassword.setText("(Password encrypted)");
    txtProfessorPassword.setEchoChar((char) 0);
                         btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDeleteStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteStudentActionPerformed
        // TODO add your handling code here:


int selectedRow = tblProfessor.getSelectedRow();
        if(selectedRow >= 0){
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?", "Warning", dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION){
                Professor professor = (Professor) tblProfessor.getValueAt(selectedRow, 0);
                professorDirectory.deleteProfessor(professor);
                JOptionPane.showMessageDialog(null, "Profile Successfully Deleted");
                 txtProfessorName.setText("");
    txtProfessorAge.setText("");
    txtProfessorGender.setText("");
    txtProfessorEmail.setText("");
    txtProfessorContact.setText("");
    txtProfessorUserName.setText("");
    txtProfessorPassword.setText("");
    txtProfessorCity.setText("");
    txtProfessorState.setText("");
    txtProfessorCountry.setText("");
                populateProfessorList();
                                     btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteStudentActionPerformed

    private void txtSearchProfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchProfFocusGained
        // TODO add your handling code here:
        if(txtSearchProf.getText().equals("Enter Name")){
            txtSearchProf.setText("");
            txtSearchProf.setForeground(Color.black);
        }
    }//GEN-LAST:event_txtSearchProfFocusGained

    private void txtSearchProfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchProfFocusLost
        // TODO add your handling code here:
        if(txtSearchProf.getText().equals(null)){
            txtSearchProf.setText("Enter Name");
            txtSearchProf.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_txtSearchProfFocusLost

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workAreaContainer.remove(this);
        CardLayout layout = (CardLayout) workAreaContainer.getLayout();
        layout.previous(workAreaContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtProfessorNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfessorNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfessorNameActionPerformed

    private void txtProfessorAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfessorAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfessorAgeActionPerformed

    private void txtProfessorGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfessorGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfessorGenderActionPerformed

    private void txtProfessorEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfessorEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfessorEmailActionPerformed

    private void txtProfessorContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfessorContactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfessorContactActionPerformed

    private void txtProfessorUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfessorUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfessorUserNameActionPerformed

    private void txtProfessorCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfessorCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfessorCityActionPerformed

    private void txtProfessorStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfessorStateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfessorStateActionPerformed

    private void txtProfessorCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfessorCountryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfessorCountryActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        btnUpdate.setEnabled(false);
        btnSave.setEnabled(true);

        txtProfessorName.setEnabled(true);
        txtProfessorAge.setEnabled(true);
        txtProfessorGender.setEnabled(true);
        txtProfessorEmail.setEnabled(true);
        txtProfessorContact.setEnabled(true);
        txtProfessorUserName.setEnabled(true);
        txtProfessorPassword.setEnabled(true);
        txtProfessorCity.setEnabled(true);
        txtProfessorState.setEnabled(true);
        txtProfessorCountry.setEnabled(true);
        
                    // Clear password field and set echo character for password hiding
    txtProfessorPassword.setText("");
    txtProfessorPassword.setEchoChar('*'); 

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        btnSave.setEnabled(false);
        btnUpdate.setEnabled(true);
//
////        txtProfessorName.setEnabled(false);
////        txtProfessorAge.setEnabled(false);
////        txtProfessorGender.setEnabled(false);
////        txtProfessorEmail.setEnabled(false);
////        txtProfessorContact.setEnabled(false);
////        txtProfessorUserName.setEnabled(false);
////        txtProfessorPassword.setEnabled(false);
////        txtProfessorCity.setEnabled(false);
////        txtProfessorState.setEnabled(false);
////        txtProfessorCountry.setEnabled(false);
//
//             Retrieve the input values from the text fields
    String name = txtProfessorName.getText();
    String age = txtProfessorAge.getText();
    String gender = txtProfessorGender.getText();
    String email = txtProfessorEmail.getText();
    String contact = txtProfessorContact.getText();
    String username = txtProfessorUserName.getText();
    String password = txtProfessorPassword.getText();
    String city = txtProfessorCity.getText();
    String state = txtProfessorState.getText();
    String country = txtProfessorCountry.getText();

    // Validation of input fields
    if (name.isEmpty() || age.isEmpty() || gender.isEmpty() || email.isEmpty() || contact.isEmpty() || username.isEmpty() || password.isEmpty() || city.isEmpty() || state.isEmpty() || country.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please fill in all fields.");
                     btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
        return;
    }
    
    // Validate password
    if (!isValidPassword(password)) {
        JOptionPane.showMessageDialog(null, "Password must be at least 6 characters long, include at least 1 special character and 1 number.");
                     btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
        return;
    }

    // Check if a row is selected
    if (selectedRowIndex >= 0) {
        // Get the selected professor from the table
        Professor professorToUpdate = (Professor) tblProfessor.getValueAt(selectedRowIndex, 0);

  
        // Check for existing professor with the same username (excluding the current professor)
         // Check for existing professor with the same name, email, or username (excluding the current professor)
        boolean isDuplicate = professorDirectory.isDuplicateProfessor(name, email, username, professorToUpdate);
        if (isDuplicate) {
            JOptionPane.showMessageDialog(null, "Duplicate professor details found. Please ensure the name, email, and username are unique.");
             btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
            return;
       
        }

        // Update professor details
        professorToUpdate.setName(name);
        professorToUpdate.setAge(age);
        professorToUpdate.setGender(gender);
        professorToUpdate.setEmail(email);
        professorToUpdate.setContact(contact);
        professorToUpdate.setUsername(username);
        professorToUpdate.setPassword(password); // Consider encrypting the password
        professorToUpdate.setCity(city);
        professorToUpdate.setState(state);
        professorToUpdate.setCountry(country);

        // Update the table with new values
        updateProfessorRowInTable(professorToUpdate);

        // Inform the user
        JOptionPane.showMessageDialog(null, "Professor Profile Updated Successfully.");

        // Disable and clear the fields
        disableAndClearFields();
    } else {
        JOptionPane.showMessageDialog(null, "Please select a professor to update.");
    }

    // Reset password field to placeholder after saving
    txtProfessorPassword.setText("(Password encrypted)");
    txtProfessorPassword.setEchoChar((char) 0);

    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtProfessorRepoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfessorRepoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfessorRepoActionPerformed

    private void txtSearchProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchProfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchProfActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteStudent;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblProfessorName;
    private javax.swing.JLabel lblProfessorRepo;
    private javax.swing.JLabel lblStudentAge;
    private javax.swing.JLabel lblStudentCity;
    private javax.swing.JLabel lblStudentContact;
    private javax.swing.JLabel lblStudentCountry;
    private javax.swing.JLabel lblStudentEmail;
    private javax.swing.JLabel lblStudentGender;
    private javax.swing.JLabel lblStudentPassword;
    private javax.swing.JLabel lblStudentState;
    private javax.swing.JLabel lblStudentUserName;
    private javax.swing.JTable tblProfessor;
    private javax.swing.JTextField txtProfessorAge;
    private javax.swing.JTextField txtProfessorCity;
    private javax.swing.JTextField txtProfessorContact;
    private javax.swing.JTextField txtProfessorCountry;
    private javax.swing.JTextField txtProfessorEmail;
    private javax.swing.JTextField txtProfessorGender;
    private javax.swing.JTextField txtProfessorName;
    private javax.swing.JPasswordField txtProfessorPassword;
    private javax.swing.JTextField txtProfessorRepo;
    private javax.swing.JTextField txtProfessorState;
    private javax.swing.JTextField txtProfessorUserName;
    private javax.swing.JTextField txtSearchProf;
    // End of variables declaration//GEN-END:variables

    private void updateProfessorRowInTable(Professor updatedProfessor) {
    if (selectedRowIndex != -1) {
        DefaultTableModel dtm = (DefaultTableModel) tblProfessor.getModel();
        dtm.setValueAt(updatedProfessor, selectedRowIndex, 0); // Assumes student object is in column 0
        dtm.setValueAt(updatedProfessor.getEmail(), selectedRowIndex, 1); // NUID in column 1
        dtm.setValueAt(updatedProfessor.getCity(), selectedRowIndex, 2); // Program in column 2
        dtm.setValueAt(updatedProfessor.getState(), selectedRowIndex, 3); // Email in column 3
    }
}
    
    
    
    private void populateProfessorList() {
        DefaultTableModel dtm = (DefaultTableModel) tblProfessor.getModel();
        dtm.setRowCount(0);
        for(Professor professor : professorDirectory.getProfessorList()){
            Object[] row = new Object[4];
            row[0] = professor;
            row[1] = professor.getEmail();
            row[2] = professor.getCity();
            row[3] = professor.getState();
            
            dtm.addRow(row);
                    
        }
        
    
    }

 private String hashPassword(String password) { 
    try {
        MessageDigest md = MessageDigest.getInstance("SHA-1"); // Consider using "SHA-256"
        md.update(password.getBytes());
        byte[] rbt = md.digest();
        StringBuilder pass = new StringBuilder();
        for (byte b : rbt) {
            pass.append(String.format("%02x", b));
        }
        return pass.toString(); 
    } catch (Exception ex) {  
        ex.printStackTrace();
    }
    return null;
}
 
}
