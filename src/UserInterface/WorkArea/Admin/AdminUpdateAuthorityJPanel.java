/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkArea.Admin;

import Business.Authority.AuthorityDirectory;
import Business.Authority.AuthorityModel;
import Business.Employer.EmployerModel;
import java.awt.CardLayout;
import java.awt.Color;
import java.security.MessageDigest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hemant
 */
public class AdminUpdateAuthorityJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AuthorityUpdateEmployerJPanel
     */
    private JPanel workAreaContainer;
    private AuthorityDirectory authorityDirectory;
    private int selectedRowIndex = -1;
    public AdminUpdateAuthorityJPanel(JPanel workAreaContainer, AuthorityDirectory authorityDirectory) {
        initComponents();
        this.workAreaContainer = workAreaContainer;
        this.authorityDirectory = authorityDirectory;
        
            // Generate sample authorities
    authorityDirectory.generateSampleAuthorities();
        
        populateAuthority();
        
          // Initialize placeholder for password field
    txtAuthorityPassword.setText("(Password encrypted)");
    txtAuthorityPassword.setEchoChar((char) 0); // To make the placeholder visible as plain text

        txtAuthorityPassword.addFocusListener(new java.awt.event.FocusAdapter() {
    public void focusGained(java.awt.event.FocusEvent evt) {
        if (txtAuthorityPassword.getText().equals("(Password encrypted)")) {
            txtAuthorityPassword.setText("");
            txtAuthorityPassword.setEchoChar('*'); // Set to your preferred echo char
        }
    }
    public void focusLost(java.awt.event.FocusEvent evt) {
        if (txtAuthorityPassword.getText().isEmpty()) {
            txtAuthorityPassword.setText("(Password encrypted)");
            txtAuthorityPassword.setEchoChar((char) 0);
        }
    }
    });    
        
        // Add a ListSelectionListener to the table
    tblAuthority.getSelectionModel().addListSelectionListener(e -> {
        if (!e.getValueIsAdjusting()) {
            selectedRowIndex = tblAuthority.getSelectedRow();
    
    if (selectedRowIndex != -1) {
    AuthorityModel authority = (AuthorityModel) tblAuthority.getValueAt(selectedRowIndex, 0);
            txtAuthorityName.setText(authority.getName());
            txtAuthorityCompany.setText(authority.getCompany());
            txtAuthorityPassword.setText(authority.getPassword());
            txtAuthorityUsername.setText(authority.getUsername());
    
    // Set password field to placeholder text
        txtAuthorityPassword.setText("(Password encrypted)");
        txtAuthorityPassword.setEchoChar((char) 0); // To make the placeholder visible as plain text
    
           }
        }
    });
    
    }
    
    private boolean isValidPassword(String password) {
    if (password.length() < 6) {
        return false;
    }
    boolean hasNum = password.matches(".*\\d.*");
    boolean hasSpecial = !password.matches("[A-Za-z0-9]*");
    return hasNum && hasSpecial;
}
    
    
    private void disableAndClearFields() {
        txtAuthorityName.setEnabled(false);
        txtAuthorityCompany.setEnabled(false);
        txtAuthorityPassword.setEnabled(false);
         txtAuthorityUsername.setEnabled(false);



    txtAuthorityName.setText("");
    txtAuthorityCompany.setText("");
    txtAuthorityPassword.setText("");
    txtAuthorityUsername.setText("");


        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAuthority = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        btnDeleteStudent = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblEmployerName = new javax.swing.JLabel();
        txtAuthorityName = new javax.swing.JTextField();
        lblEmployerCompany = new javax.swing.JLabel();
        txtAuthorityCompany = new javax.swing.JTextField();
        lblEmployerUserName = new javax.swing.JLabel();
        txtAuthorityUsername = new javax.swing.JTextField();
        lblEmployerPassword = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        txtSearchAuth = new javax.swing.JTextField();
        txtAuthorityPassword = new javax.swing.JPasswordField();

        setBackground(new java.awt.Color(255, 255, 204));

        jLabel1.setBackground(new java.awt.Color(153, 153, 153));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("View Authority Profile");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), null, null));

        tblAuthority.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Company Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAuthority);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnDeleteStudent.setText("Delete profile");
        btnDeleteStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteStudentActionPerformed(evt);
            }
        });

        btnBack.setText("< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblEmployerName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployerName.setText("Name : ");

        txtAuthorityName.setEnabled(false);
        txtAuthorityName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAuthorityNameActionPerformed(evt);
            }
        });

        lblEmployerCompany.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployerCompany.setText("Company : ");

        txtAuthorityCompany.setEnabled(false);
        txtAuthorityCompany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAuthorityCompanyActionPerformed(evt);
            }
        });

        lblEmployerUserName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployerUserName.setText("User Name : ");

        txtAuthorityUsername.setEnabled(false);
        txtAuthorityUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAuthorityUsernameActionPerformed(evt);
            }
        });

        lblEmployerPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployerPassword.setText("Password : ");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        txtSearchAuth.setForeground(new java.awt.Color(204, 204, 204));
        txtSearchAuth.setText("Enter Name");
        txtSearchAuth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchAuthFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchAuthFocusLost(evt);
            }
        });
        txtSearchAuth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchAuthActionPerformed(evt);
            }
        });

        txtAuthorityPassword.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1352, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnDeleteStudent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchAuth, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblEmployerName, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(txtAuthorityName, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblEmployerCompany, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(txtAuthorityCompany, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblEmployerUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(txtAuthorityUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblEmployerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtAuthorityPassword))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAuthorityName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmployerName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployerCompany, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAuthorityCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmployerUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAuthorityUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmployerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAuthorityPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchAuth, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnDeleteStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(333, 333, 333))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
//        // TODO add your handling code here:
//        int selectedRow = tblAuthority.getSelectedRow();
//        if(selectedRow < 0){
//            JOptionPane.showConfirmDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
//        }
//        else{
//            
//            AuthorityModel authority = (AuthorityModel) tblAuthority.getValueAt(selectedRow, 0);
//            txtAuthorityName.setText(authority.getName());
//            txtAuthorityCompany.setText(authority.getCompany());
//            txtAuthorityPassword.setText(authority.getPassword());
//            txtAuthorityUsername.setText(authority.getUsername());
//        }


                           // Check if the search field is empty
    String authSearch = (String) txtSearchAuth.getText();
    if(authSearch.isEmpty()){
        JOptionPane.showMessageDialog(null, "Please enter a valid 3rd-party Authority to search.");
        return;
    }
    
     // Search for the employer
   AuthorityModel result = authorityDirectory.searchAuthority(authSearch);
    if(result == null){
        JOptionPane.showMessageDialog(null, "Employer does not exist.");
        return;
    } else{
                    txtAuthorityName.setText(result.getName());
            txtAuthorityCompany.setText(result.getCompany());
            txtAuthorityPassword.setText(result.getPassword());
            txtAuthorityUsername.setText(result.getUsername());

                            txtAuthorityPassword.setText("(Password encrypted)");
    txtAuthorityPassword.setEchoChar((char) 0);
                         btnSave.setEnabled(false);
        btnUpdate.setEnabled(true);
    }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDeleteStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteStudentActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblAuthority.getSelectedRow();
        if(selectedRow >= 0){
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?", "Warning", dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION){
                AuthorityModel authority = (AuthorityModel) tblAuthority.getValueAt(selectedRow, 0);
                authorityDirectory.deleteAuthority(authority);
                JOptionPane.showMessageDialog(null, "Profile Successfully Deleted");
                  txtAuthorityName.setText("");
    txtAuthorityCompany.setText("");
    txtAuthorityPassword.setText("");
    txtAuthorityUsername.setText("");
                
                populateAuthority();
                btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
            }
        }else{
            JOptionPane.showConfirmDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteStudentActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workAreaContainer.remove(this);
        CardLayout layout = (CardLayout) workAreaContainer.getLayout();
        layout.previous(workAreaContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtAuthorityNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAuthorityNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAuthorityNameActionPerformed

    private void txtAuthorityCompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAuthorityCompanyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAuthorityCompanyActionPerformed

    private void txtAuthorityUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAuthorityUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAuthorityUsernameActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        btnUpdate.setEnabled(false);
        btnSave.setEnabled(true);

        txtAuthorityName.setEnabled(true);
        txtAuthorityCompany.setEnabled(true);
        txtAuthorityPassword.setEnabled(true);
        txtAuthorityUsername.setEnabled(true);
        
                                    // Clear password field and set echo character for password hiding
    txtAuthorityPassword.setText("");
    txtAuthorityPassword.setEchoChar('*'); 
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        btnSave.setEnabled(false);
        btnUpdate.setEnabled(true);

//        txtAuthorityName.setEnabled(false);
//        txtAuthorityCompany.setEnabled(false);
//        txtAuthorityPassword.setEnabled(false);
//        txtAuthorityUsername.setEnabled(false);

        String name = txtAuthorityName.getText();
        String company = txtAuthorityCompany.getText();
        String username = txtAuthorityUsername.getText();
        String password = txtAuthorityPassword.getText();
        
                    // Validation of input fields
    if (name.isEmpty() || company.isEmpty() || username.isEmpty() || password.isEmpty() ) {
        JOptionPane.showMessageDialog(null, "Please fill in all fields.");
        return;
    }
    
        // Validate password
    if (!isValidPassword(password)) {
        JOptionPane.showMessageDialog(null, "Password must be at least 6 characters long, include at least 1 special character and 1 number.");
        return;
    }

        // Check if a row is selected
    if (selectedRowIndex >= 0) {
        // Get the selected professor from the table
        AuthorityModel authorityToUpdate = (AuthorityModel) tblAuthority.getValueAt(selectedRowIndex, 0);
        
        // Check for existing professor with the same username (excluding the current professor)
         // Check for existing professor with the same name, email, or username (excluding the current professor)
        boolean isDuplicate = authorityDirectory.isDuplicateAuthority(name, username, authorityToUpdate);
        if (isDuplicate) {
            JOptionPane.showMessageDialog(null, "Duplicate 3rd-party authority details found. Please ensure the name, email, and username are unique.");
             btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
            return;
       
        }
        
        // Update authority details
        authorityToUpdate.setName(name);
        authorityToUpdate.setCompany(company);
        authorityToUpdate.setUsername(username);
        authorityToUpdate.setPassword(password);

                // Update the table with new values
        updateAuthorityRowInTable(authorityToUpdate);

        // Inform the user
        JOptionPane.showMessageDialog(null, "Authority Profile Updated Successfully.");

        // Disable and clear the fields
        disableAndClearFields();
    } else {
        JOptionPane.showMessageDialog(null, "Please select a 3rd-party authority profile to update.");
    }

    // Reset password field to placeholder after saving
    txtAuthorityPassword.setText("(Password encrypted)");
    txtAuthorityPassword.setEchoChar((char) 0);
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtSearchAuthFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchAuthFocusGained
        // TODO add your handling code here:
        if(txtSearchAuth.getText().equals("Enter Name")){
            txtSearchAuth.setText("");
            txtSearchAuth.setForeground(Color.black);
        }
    }//GEN-LAST:event_txtSearchAuthFocusGained

    private void txtSearchAuthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchAuthFocusLost
        // TODO add your handling code here:
        if(txtSearchAuth.getText().equals(null)){
            txtSearchAuth.setText("Enter Name");
            txtSearchAuth.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_txtSearchAuthFocusLost

    private void txtSearchAuthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchAuthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchAuthActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteStudent;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEmployerCompany;
    private javax.swing.JLabel lblEmployerName;
    private javax.swing.JLabel lblEmployerPassword;
    private javax.swing.JLabel lblEmployerUserName;
    private javax.swing.JTable tblAuthority;
    private javax.swing.JTextField txtAuthorityCompany;
    private javax.swing.JTextField txtAuthorityName;
    private javax.swing.JPasswordField txtAuthorityPassword;
    private javax.swing.JTextField txtAuthorityUsername;
    private javax.swing.JTextField txtSearchAuth;
    // End of variables declaration//GEN-END:variables

            private void updateAuthorityRowInTable(AuthorityModel updatedAuthority) {
    if (selectedRowIndex != -1) {
        DefaultTableModel dtm = (DefaultTableModel) tblAuthority.getModel();
        dtm.setValueAt(updatedAuthority, selectedRowIndex, 0); // Assumes student object is in column 0
        dtm.setValueAt(updatedAuthority.getCompany(), selectedRowIndex, 1); // NUID in column 1
        
    }
}
    
    
     private String hashPassword(String password) { 
    try {
        MessageDigest md = MessageDigest.getInstance("SHA-1"); // Consider using "SHA-256"
        md.update(password.getBytes());
        byte[] rbt = md.digest();
        StringBuilder pass = new StringBuilder();
        for (byte b : rbt) {
            pass.append(String.format("%02x", b));
        }
        return pass.toString(); 
    } catch (Exception ex) {  
        ex.printStackTrace();
    }
    return null;
}
     
    
    
    private void populateAuthority() {
        DefaultTableModel dtm = (DefaultTableModel) tblAuthority.getModel();
        dtm.setRowCount(0);
        
        for(AuthorityModel authority : authorityDirectory.getAuthorityList()){
            Object[] row = new Object[2];
            row[0] = authority;
            row[1] = authority.getCompany();
            
            dtm.addRow(row);
        }
    
    }
}
