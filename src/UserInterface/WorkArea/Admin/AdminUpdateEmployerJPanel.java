/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkArea.Admin;

import Business.Employer.EmployerDirectory;
import Business.Employer.EmployerModel;
import java.awt.CardLayout;
import java.awt.Color;
import java.security.MessageDigest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hemant
 */
public class AdminUpdateEmployerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AdminUpdateEmployerJPanel
     */
    private JPanel workAreaContainer;
    private EmployerDirectory employerDirectory;
    private int selectedRowIndex = -1;

    public AdminUpdateEmployerJPanel(JPanel workAreaContainer, EmployerDirectory employerDirectory) {
        initComponents();
        this.workAreaContainer = workAreaContainer;
        this.employerDirectory = employerDirectory;

        txtSearchEmp.setText("Enter Name");
        txtSearchEmp.setForeground(Color.GRAY);

        //REMOVE LATER
        employerDirectory.generateSampleEmployers();

        populateEmployer();

        // Initialize placeholder for password field
        txtEmployerPassword.setText("(Password encrypted)");
        txtEmployerPassword.setEchoChar((char) 0); // To make the placeholder visible as plain text

        txtEmployerPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (txtEmployerPassword.getText().equals("(Password encrypted)")) {
                    txtEmployerPassword.setText("");
                    txtEmployerPassword.setEchoChar('*'); // Set to your preferred echo char
                }
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                if (txtEmployerPassword.getText().isEmpty()) {
                    txtEmployerPassword.setText("(Password encrypted)");
                    txtEmployerPassword.setEchoChar((char) 0);
                }
            }
        });

// Add a ListSelectionListener to the table
        tblEmployer.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                selectedRowIndex = tblEmployer.getSelectedRow();

                if (selectedRowIndex != -1) {
                    EmployerModel employer = (EmployerModel) tblEmployer.getValueAt(selectedRowIndex, 0);
                    txtEmployerName.setText(employer.getName());
                    txtEmployerCompany.setText(employer.getCompany());
                    txtEmployerDesignation.setText(employer.getDesignation());
                    txtEmployerEmail.setText(employer.getEmailID());
                    txtEmployerPassword.setText(employer.getPassword());
                    txtEmployerUserId.setText(employer.getUsername());
                    txtEmployerLocation.setText(employer.getLocation());

                    // Set password field to placeholder text
                    txtEmployerPassword.setText("(Password encrypted)");
                    txtEmployerPassword.setEchoChar((char) 0); // To make the placeholder visible as plain text

                }
            }
        });

    }

    private boolean isValidPassword(String password) {
        if (password.length() < 6) {
            return false;
        }
        boolean hasNum = password.matches(".*\\d.*");
        boolean hasSpecial = !password.matches("[A-Za-z0-9]*");
        return hasNum && hasSpecial;
    }

    private void disableAndClearFields() {
        txtEmployerName.setEnabled(false);
        txtEmployerCompany.setEnabled(false);
        txtEmployerDesignation.setEnabled(false);
        txtEmployerEmail.setEnabled(false);
        txtEmployerPassword.setEnabled(false);
        txtEmployerUserId.setEnabled(false);
        txtEmployerLocation.setEnabled(false);

        txtEmployerName.setText("");
        txtEmployerCompany.setText("");
        txtEmployerDesignation.setText("");
        txtEmployerEmail.setText("");
        txtEmployerPassword.setText("");
        txtEmployerUserId.setText("");
        txtEmployerLocation.setText("");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployer = new javax.swing.JTable();
        btnDeleteStudent = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblEmployerName = new javax.swing.JLabel();
        txtEmployerName = new javax.swing.JTextField();
        lblEmployerCompany = new javax.swing.JLabel();
        txtEmployerCompany = new javax.swing.JTextField();
        lblEmployerEmail = new javax.swing.JLabel();
        txtEmployerEmail = new javax.swing.JTextField();
        lblEmployerLocation = new javax.swing.JLabel();
        txtEmployerLocation = new javax.swing.JTextField();
        lblEmployerDesignation = new javax.swing.JLabel();
        txtEmployerDesignation = new javax.swing.JTextField();
        lblEmployerUserName = new javax.swing.JLabel();
        txtEmployerUserId = new javax.swing.JTextField();
        lblEmployerPassword = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        txtEmployerPassword = new javax.swing.JPasswordField();
        btnSearch = new javax.swing.JButton();
        txtSearchEmp = new javax.swing.JTextField();

        setEnabled(false);

        jLabel1.setBackground(new java.awt.Color(153, 153, 153));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("View Employer Profile");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), null, null));

        tblEmployer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Company Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEmployer);
        if (tblEmployer.getColumnModel().getColumnCount() > 0) {
            tblEmployer.getColumnModel().getColumn(0).setResizable(false);
            tblEmployer.getColumnModel().getColumn(1).setResizable(false);
        }

        btnDeleteStudent.setText("Delete profile");
        btnDeleteStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteStudentActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(255, 204, 204));
        btnBack.setText("< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblEmployerName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployerName.setText("Name : ");

        txtEmployerName.setEnabled(false);
        txtEmployerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmployerNameActionPerformed(evt);
            }
        });

        lblEmployerCompany.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployerCompany.setText("Company : ");

        txtEmployerCompany.setEnabled(false);
        txtEmployerCompany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmployerCompanyActionPerformed(evt);
            }
        });

        lblEmployerEmail.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployerEmail.setText("E-mail Id : ");

        txtEmployerEmail.setEnabled(false);
        txtEmployerEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmployerEmailActionPerformed(evt);
            }
        });

        lblEmployerLocation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployerLocation.setText("Location : ");

        txtEmployerLocation.setEnabled(false);
        txtEmployerLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmployerLocationActionPerformed(evt);
            }
        });

        lblEmployerDesignation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployerDesignation.setText("Designation : ");

        txtEmployerDesignation.setEnabled(false);
        txtEmployerDesignation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmployerDesignationActionPerformed(evt);
            }
        });

        lblEmployerUserName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployerUserName.setText("User Name : ");

        txtEmployerUserId.setEnabled(false);
        txtEmployerUserId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmployerUserIdActionPerformed(evt);
            }
        });

        lblEmployerPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployerPassword.setText("Password : ");

        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtEmployerPassword.setEnabled(false);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtSearchEmp.setForeground(new java.awt.Color(204, 204, 204));
        txtSearchEmp.setText("Enter Name");
        txtSearchEmp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchEmpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchEmpFocusLost(evt);
            }
        });
        txtSearchEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchEmpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1340, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDeleteStudent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(27, 27, 27)
                                    .addComponent(txtSearchEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(308, 308, 308)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblEmployerName, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblEmployerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblEmployerLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(36, 36, 36)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtEmployerName, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtEmployerLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtEmployerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblEmployerCompany, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(36, 36, 36)
                                    .addComponent(txtEmployerCompany, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblEmployerDesignation, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblEmployerUserName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lblEmployerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(36, 36, 36)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtEmployerUserId, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                        .addComponent(txtEmployerDesignation, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                        .addComponent(txtEmployerPassword)))))
                        .addGap(177, 177, 177))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEmployerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmployerName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployerCompany, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmployerCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmployerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployerLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmployerLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployerDesignation, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmployerDesignation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmployerUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmployerUserId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmployerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchEmp))
                .addGap(19, 19, 19)
                .addComponent(btnDeleteStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteStudentActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblEmployer.getSelectedRow();
        if (selectedRow >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure?", "Warning", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                EmployerModel employer = (EmployerModel) tblEmployer.getValueAt(selectedRow, 0);
                employerDirectory.deleteEmploye(employer);
                JOptionPane.showMessageDialog(null, "Profile Successfully Deleted");
                txtEmployerName.setText("");
                txtEmployerCompany.setText("");
                txtEmployerDesignation.setText("");
                txtEmployerEmail.setText("");
                txtEmployerPassword.setText("");
                txtEmployerUserId.setText("");
                txtEmployerLocation.setText("");

                populateEmployer();
                btnSave.setEnabled(true);
                btnUpdate.setEnabled(false);
            }
        } else {
            JOptionPane.showConfirmDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteStudentActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workAreaContainer.remove(this);
        CardLayout layout = (CardLayout) workAreaContainer.getLayout();
        layout.previous(workAreaContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtEmployerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmployerNameActionPerformed

    private void txtEmployerCompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployerCompanyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmployerCompanyActionPerformed

    private void txtEmployerEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployerEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmployerEmailActionPerformed

    private void txtEmployerLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployerLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmployerLocationActionPerformed

    private void txtEmployerDesignationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployerDesignationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmployerDesignationActionPerformed

    private void txtEmployerUserIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployerUserIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmployerUserIdActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        
//        txtEmployerName.setEnabled(false);
//        txtEmployerCompany.setEnabled(false);
//        txtEmployerDesignation.setEnabled(false);
//        txtEmployerEmail.setEnabled(false);
//        txtEmployerPassword.setEnabled(false);
//        txtEmployerUserId.setEnabled(false);
//        txtEmployerLocation.setEnabled(false);
        String name = txtEmployerName.getText();
        String company = txtEmployerCompany.getText();
        String emailID = txtEmployerEmail.getText();
        String location = txtEmployerLocation.getText();
        String designation = txtEmployerDesignation.getText();
        String username = txtEmployerUserId.getText();
        String password = txtEmployerPassword.getText();

        // Validation of input fields
        if (name.isEmpty() || company.isEmpty() || emailID.isEmpty() || location.isEmpty() || designation.isEmpty() || username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill in all fields.");
            return;
        }

        // Validate password
        if (!isValidPassword(password)) {
            JOptionPane.showMessageDialog(null, "Password must be at least 6 characters long, include at least 1 special character and 1 number.");
            return;
        }

        // Check if a row is selected
        if (selectedRowIndex >= 0) {
            // Get the selected professor from the table
            EmployerModel employerToUpdate = (EmployerModel) tblEmployer.getValueAt(selectedRowIndex, 0);

            // Check for existing professor with the same username (excluding the current professor)
            // Check for existing professor with the same name, email, or username (excluding the current professor)
            boolean isDuplicate = employerDirectory.isDuplicateEmployer(name, emailID, username, employerToUpdate);
            if (isDuplicate) {
                JOptionPane.showMessageDialog(null, "Duplicate employer details found. Please ensure the name, email, and username are unique.");
                btnSave.setEnabled(true);
                btnUpdate.setEnabled(false);
                return;

            }

            // Update employer details
            employerToUpdate.setName(name);
            employerToUpdate.setCompany(company);
            employerToUpdate.setEmailID(emailID);
            employerToUpdate.setLocation(location);
            employerToUpdate.setDesignation(designation);
            employerToUpdate.setUsername(username);
            employerToUpdate.setPassword(password);

            // Update the table with new values
            updateEmployerRowInTable(employerToUpdate);

            // Inform the user
            JOptionPane.showMessageDialog(null, "Employer Profile Updated Successfully.");

            // Disable and clear the fields
            disableAndClearFields();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a employer to update.");
        }

        // Reset password field to placeholder after saving
        txtEmployerPassword.setText("(Password encrypted)");
        txtEmployerPassword.setEchoChar((char) 0);
        
        btnSave.setEnabled(false);
        btnUpdate.setEnabled(true);

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        btnUpdate.setEnabled(false);
        btnSave.setEnabled(true);

        txtEmployerName.setEnabled(true);
        txtEmployerCompany.setEnabled(true);
        txtEmployerDesignation.setEnabled(true);
        txtEmployerEmail.setEnabled(true);
        txtEmployerPassword.setEnabled(true);
        txtEmployerUserId.setEnabled(true);
        txtEmployerLocation.setEnabled(true);

        // Clear password field and set echo character for password hiding
        txtEmployerPassword.setText("");
        txtEmployerPassword.setEchoChar('*');

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:

        // Check if the search field is empty
        String empSearch = (String) txtSearchEmp.getText();
        if (empSearch.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a valid Employer to search.");
            return;
        }

        // Search for the employer
        EmployerModel result = employerDirectory.searchEmployer(empSearch);
        if (result == null) {
            JOptionPane.showMessageDialog(null, "Employer does not exist.");
            return;
        } else {
            txtEmployerName.setText(result.getName());
            txtEmployerCompany.setText(result.getCompany());
            txtEmployerDesignation.setText(result.getDesignation());
            txtEmployerEmail.setText(result.getEmailID());
            txtEmployerPassword.setText(result.getPassword());
            txtEmployerUserId.setText(result.getUsername());
            txtEmployerLocation.setText(result.getLocation());

            txtEmployerPassword.setText("(Password encrypted)");
            txtEmployerPassword.setEchoChar((char) 0);
            
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtSearchEmpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchEmpFocusGained
        // TODO add your handling code here:
        if (txtSearchEmp.getText().equals("Enter Name")) {
            txtSearchEmp.setText("");
            txtSearchEmp.setForeground(Color.black);
        }
    }//GEN-LAST:event_txtSearchEmpFocusGained

    private void txtSearchEmpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchEmpFocusLost
        // TODO add your handling code here:
        if (txtSearchEmp.getText().equals(null)) {
            txtSearchEmp.setText("Enter Name");
            txtSearchEmp.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_txtSearchEmpFocusLost

    private void txtSearchEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchEmpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchEmpActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteStudent;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEmployerCompany;
    private javax.swing.JLabel lblEmployerDesignation;
    private javax.swing.JLabel lblEmployerEmail;
    private javax.swing.JLabel lblEmployerLocation;
    private javax.swing.JLabel lblEmployerName;
    private javax.swing.JLabel lblEmployerPassword;
    private javax.swing.JLabel lblEmployerUserName;
    private javax.swing.JTable tblEmployer;
    private javax.swing.JTextField txtEmployerCompany;
    private javax.swing.JTextField txtEmployerDesignation;
    private javax.swing.JTextField txtEmployerEmail;
    private javax.swing.JTextField txtEmployerLocation;
    private javax.swing.JTextField txtEmployerName;
    private javax.swing.JPasswordField txtEmployerPassword;
    private javax.swing.JTextField txtEmployerUserId;
    private javax.swing.JTextField txtSearchEmp;
    // End of variables declaration//GEN-END:variables

    private void updateEmployerRowInTable(EmployerModel updatedEmployer) {
        if (selectedRowIndex != -1) {
            DefaultTableModel dtm = (DefaultTableModel) tblEmployer.getModel();
            dtm.setValueAt(updatedEmployer, selectedRowIndex, 0); // Assumes student object is in column 0
            dtm.setValueAt(updatedEmployer.getCompany(), selectedRowIndex, 1); // NUID in column 1

        }
    }

    private void populateEmployer() {
        DefaultTableModel dtm = (DefaultTableModel) tblEmployer.getModel();
        dtm.setRowCount(0);

        for (EmployerModel employer : employerDirectory.getEmployerList()) {
            Object[] row = new Object[2];
            row[0] = employer;
            row[1] = employer.getCompany();

            dtm.addRow(row);
        }
    }

    private String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-1"); // Consider using "SHA-256"
            md.update(password.getBytes());
            byte[] rbt = md.digest();
            StringBuilder pass = new StringBuilder();
            for (byte b : rbt) {
                pass.append(String.format("%02x", b));
            }
            return pass.toString();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

}
