/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Student.ui;

import Business.Professor.model.Course;
import Business.Professor.model.ProfessorDirectory;
import Business.Student.model.Student;
import Business.Student.model.StudentDirectory;
import java.awt.CardLayout;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.io.File;
import java.io.IOException;
import org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType0Font;

/**
 *
 * @author Hemant
 */
public class TranscriptJPanel extends javax.swing.JPanel {

    //This variable stores JPanel workAreaContainer
    private JPanel workAreaContainer;
    
    //This variable stores student directory
    private StudentDirectory studentDirectory;
    
      
    //This variable stores student
    private Student student;
    
    //This variable stores professor directory
    private ProfessorDirectory professorDirectory;
    /**
     * Creates new form TranscriptJPanel
     */
    public TranscriptJPanel(JPanel workAreaContainer,Student student,ProfessorDirectory professorDirectory) {
        initComponents();
         this.workAreaContainer=workAreaContainer;
        this.professorDirectory=professorDirectory;
        this.student=student;
        populateTranscript();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourse = new javax.swing.JTable();
        btnDownloadPdf = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "CRN", "Course Name", "Start Date", "End Date", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCourse);
        if (tblCourse.getColumnModel().getColumnCount() > 0) {
            tblCourse.getColumnModel().getColumn(0).setResizable(false);
            tblCourse.getColumnModel().getColumn(1).setResizable(false);
            tblCourse.getColumnModel().getColumn(2).setResizable(false);
            tblCourse.getColumnModel().getColumn(3).setResizable(false);
            tblCourse.getColumnModel().getColumn(4).setResizable(false);
        }

        btnDownloadPdf.setText("Download PDF");
        btnDownloadPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadPdfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(311, 311, 311)
                        .addComponent(btnDownloadPdf)
                        .addGap(23, 23, 23))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(180, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnDownloadPdf))
                .addContainerGap(306, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        workAreaContainer.remove(this);
        CardLayout layout = (CardLayout) workAreaContainer.getLayout();
        layout.previous(workAreaContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDownloadPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadPdfActionPerformed
          JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showSaveDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            
            try {
                PDDocument document = new PDDocument();
                PDPage page = new PDPage(PDRectangle.A4);
                document.addPage(page);
                
                PDPageContentStream contentStream = new PDPageContentStream(document, page, AppendMode.APPEND, true);
              // contentStream.setFont(PDType1Font.HELVETICA_BOLD, 12);
                //contentStream.setFont(PDFont, 12);
                PDType0Font font = PDType0Font.load(document, new File("F:\\NEU\\AED\\Group assignment 3\\latest\\1\\3\\assignment-3-teamr2h\\Roboto\\Roboto-Bold.ttf"));
contentStream.setFont(font, 12);
                float margin = 5;
                float yStart = page.getMediaBox().getHeight() - margin;
                float tableWidth = page.getMediaBox().getWidth() - 2 * margin;
                float yPosition = yStart;
                int rows = tblCourse.getRowCount();
                int cols = tblCourse.getColumnCount();
                float rowHeight = 20f;
                float tableHeight = rowHeight * (float)rows;
                float tableYLength = rowHeight * (float)(rows + 1);
                float pageTopMargin = 5;
                
                PDPageContentStream tableContentStream = new PDPageContentStream(document, page);
                tableContentStream.setFont(font, 12);
                
                // Draw table headers
                float tableXPosition = margin;
                for (int i = 0; i < cols; i++) {
                    tableContentStream.beginText();
                    tableContentStream.newLineAtOffset(tableXPosition, yStart - pageTopMargin);
                    tableContentStream.showText(tblCourse.getColumnName(i));
                    tableContentStream.endText();
                    tableXPosition += 90; // You can adjust the column width here
                }
                
                yStart -= rowHeight;
                // Draw table content
                for (int i = 0; i < tblCourse.getRowCount(); i++) {
                    tableXPosition = margin;
                    for (int j = 0; j < cols; j++) {
                        tableContentStream.beginText();
                        tableContentStream.newLineAtOffset(tableXPosition, yStart);
                        tableContentStream.showText(tblCourse.getValueAt(i, j).toString());
                        tableContentStream.endText();
                        tableXPosition += 90; // You can adjust the column width here
                    }
                    yStart -= rowHeight;
                }
                tableContentStream.close();
                
                document.save(file);
                document.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnDownloadPdfActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDownloadPdf;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCourse;
    // End of variables declaration//GEN-END:variables

    private void populateTranscript() {
          DefaultTableModel dtm = (DefaultTableModel) tblCourse.getModel();
        dtm.setRowCount(0);
        
        List<Course> allCourses = professorDirectory.getProfessorList().stream()
        .flatMap(professor -> professor.getCourseHistory().getCourseList().stream())
        .filter(course -> {
            return student.getCompletedCoursesList().keySet().contains(Integer.toString(course.getCRN()));
        })
        .collect(Collectors.toList());
        for(Course course : allCourses){
            List<Student> enrolledStudentsWithNUID = course.getEnrolledStudents().stream()
    .filter(student1 -> student1.getNUID().equals(student.getNUID()))
    .collect(Collectors.toList());
            Object[] row = new Object[5];
            row[0] = course.getCRN();
            row[1] = course;
            row[2] = course.getStartDate();
            row[3] = course.getEndDate();
            row[4] = enrolledStudentsWithNUID.get(0).getCompletedCoursesList().get(Integer.toString(course.getCRN()));
            
            dtm.addRow(row);
        } 
    }
}
