/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Login;

import UserInterface.WorkArea.Admin.AdminCreateProfessorJPanel;
import UserInterface.WorkArea.Admin.AdminCreateStudentJPanel;
import UserInterface.WorkArea.Admin.adminHomePageJPanel;
import Business.Authority.AuthorityDirectory;
import Business.Authority.AuthorityModel;
import Business.Employer.EmployerDirectory;
import Business.Employer.EmployerModel;
import Business.Professor.model.Professor;
import Business.Professor.model.ProfessorDirectory;
import UserInterface.Professor.ui.ProfessorHomePageJPanel;
import Business.Student.model.Student;
import Business.Student.model.StudentDirectory;
import UserInterface.Authority.AuthorityHomePageJPanel;
import UserInterface.Employer.EmployerHomePageJPanel;
import UserInterface.Student.ui.StudentHomePageJPanel;
import UserInterface.WorkArea.Admin.AdminCreateAuthority;
import UserInterface.WorkArea.Admin.AdminCreateEmployer;
import java.awt.CardLayout;
import java.security.MessageDigest;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Hemant
 */
public class loginPageJPanel extends javax.swing.JPanel {

    /**
     * Creates new form loginPageJPanel
     */
    private JPanel workAreaContainer;
    
    //This variable stores professor directory
    private ProfessorDirectory professorDirectory;
    
    //This variable stores Student directory
    private StudentDirectory studentDirectory;
    
    //This variable stores employer directory
    private EmployerDirectory employerDirectory;
    
    //This variable stores authority directory
    private AuthorityDirectory authorityDirectory;
     
    public loginPageJPanel(JPanel workAreaContainer,ProfessorDirectory professorDirectory,StudentDirectory studentDirectory,EmployerDirectory employerDirectory,AuthorityDirectory authorityDirectory) {
        initComponents();
        this.workAreaContainer = workAreaContainer;
        this.professorDirectory=professorDirectory;
        this.studentDirectory=studentDirectory;
        this.authorityDirectory=authorityDirectory;
        this.employerDirectory=employerDirectory;
        
            // Generate samples
            studentDirectory.generateSampleStudents();
            professorDirectory.generateSampleProfessors();
            employerDirectory.generateSampleEmployers();
    authorityDirectory.generateSampleAuthorities();
        
        // Add ActionListener to clRole JComboBox
    clRole.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            // Get the selected item from clRole
            String selectedRole = (String) clRole.getSelectedItem();

            // Enable or disable jButton1 based on the selected role
            if ("Admin".equals(selectedRole)) {
                jButton1.setEnabled(false);
            } else {
                jButton1.setEnabled(true);
            }
            
                    // Clear the username and password fields
        txtUsername.setText("");
        txtPassword.setText("");
        
        }
    });

    // Initial state of jButton1 depending on the initial selection of clRole
    if ("Admin".equals(clRole.getSelectedItem())) {
        jButton1.setEnabled(false);
    } else {
        jButton1.setEnabled(true);
    }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHeader = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        clRole = new javax.swing.JComboBox<>();
        lblRole = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));

        lblHeader.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeader.setText("Login Page");

        lblUsername.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblUsername.setText("Username:");

        txtUsername.setPreferredSize(new java.awt.Dimension(64, 34));

        lblPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPassword.setText("Password:");

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        clRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin", "Professor", "Student", "Employer", "3rd Party Authority" }));
        clRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clRoleActionPerformed(evt);
            }
        });

        lblRole.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRole.setText("Role:");

        jButton1.setText("Create new account");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(432, 432, 432)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblUsername, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(lblRole, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(22, 22, 22)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(clRole, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(lblHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 1140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(447, 447, 447)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(533, 533, 533)
                        .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblPassword, lblRole, lblUsername});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtPassword, txtUsername});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clRole, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRole, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblPassword, lblRole, lblUsername});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {clRole, txtPassword, txtUsername});

    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
//        // TODO add your handling code here:
//        String userName = txtUsername.getText();
//        //password
//    String password = new String(txtPassword.getPassword()); // Get the password as a string
//
//    // Hash the entered password
//    String hashedPassword = hashPassword(password);         
//    
//        String role = (String) clRole.getSelectedItem();
//
//        if(role == "Admin"){
//            if(userName.equals("admin") && password.equals("admin")){
//            adminHomePageJPanel panel = new adminHomePageJPanel(workAreaContainer,professorDirectory,studentDirectory,employerDirectory, authorityDirectory);
//            workAreaContainer.add("adminHomePageJPanel", panel);
//            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
//            layout.next(workAreaContainer);
//            } else {
//                JOptionPane.showMessageDialog(null, "Invalid Admin Login");
//            }
//
//              
//        }
//        
//        
//        // Role : Professor
//        if(role == "Professor"){
//           // Professor professor=professorDirectory.searchProfessor(username);
//             Optional<Professor> foundProfessor = professorDirectory.getProfessorList().stream()
//            .filter(professor -> professor.getUsername().equals(userName) 
//                && professor.getPassword().equals(hashedPassword)) // Compare with hashed password
//            .findFirst();
//             
//        if(foundProfessor.isPresent()){
//            ProfessorHomePageJPanel panel = new ProfessorHomePageJPanel(workAreaContainer,foundProfessor.get(),professorDirectory);
//            workAreaContainer.add("ProfessorHomePageJPanel", panel);
//            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
//            layout.next(workAreaContainer);}
//        } else{
//              JOptionPane.showMessageDialog(null, "Invalid login credentials for Professor.");
//        } 
//        
//        
//        
//        // Role : Student
//        if(role == "Student"){
//            Optional<Student> foundStudent = studentDirectory.getStudentList().stream()
//            .filter(student -> student.getUsername().equals(userName) 
//                && student.getPassword().equals(hashedPassword)) // Compare with hashed password
//            .findFirst();
//             
//        if(foundStudent.isPresent()){
//            StudentHomePageJPanel panel = new StudentHomePageJPanel(workAreaContainer,foundStudent.get(),studentDirectory);
//            workAreaContainer.add("StudentHomePageJPanel", panel);
//            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
//            layout.next(workAreaContainer);}
//        } else{
//              JOptionPane.showMessageDialog(null, "Invalid login credentials for Student.");
//        }   
//            
//            
//            
//        // Role : Employer
//        if(role == "Employer"){
//            Optional<EmployerModel> foundEmployer = employerDirectory.getEmployerList().stream()
//            .filter(person -> person.getUsername().equals(userName) 
//                && person.getPassword().equals(hashedPassword)) // Compare with hashed password
//            .findFirst();
//             
//        if(foundEmployer.isPresent()){
//            EmployerHomePageJPanel panel = new EmployerHomePageJPanel(workAreaContainer,foundEmployer.get(),employerDirectory);
//            workAreaContainer.add("EmployerHomePageJPanel", panel);
//            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
//            layout.next(workAreaContainer);}
//        } else{
//              JOptionPane.showMessageDialog(null, "Invalid login credentials for Employer.");
//        } 
//
//
//        // Role : Authority
//        if(role == "Authority"){
//            Optional<AuthorityModel> foundAuthority = authorityDirectory.getAuthorityList().stream()
//            .filter(person -> person.getUsername().equals(userName) 
//                && person.getPassword().equals(hashedPassword)) // Compare with hashed password
//            .findFirst();
//             
//        if(foundAuthority.isPresent()){
//            AuthorityHomePageJPanel panel = new AuthorityHomePageJPanel(workAreaContainer,foundAuthority.get(),authorityDirectory);
//            workAreaContainer.add("EmployerHomePageJPanel", panel);
//            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
//            layout.next(workAreaContainer);}
//        } else{
//              JOptionPane.showMessageDialog(null, "Invalid login credentials for Authority.");
//        } 


    // Get username and password
    String userName = txtUsername.getText();
    String password = new String(txtPassword.getPassword());
    String hashedPassword = hashPassword(null);
    
    String role = (String) clRole.getSelectedItem();

            if(role.equals("Admin")){
            if(userName.equals("admin") && password.equals("admin")){
            adminHomePageJPanel panel = new adminHomePageJPanel(workAreaContainer,professorDirectory,studentDirectory,employerDirectory, authorityDirectory);
            workAreaContainer.add("adminHomePageJPanel", panel);
            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
            layout.next(workAreaContainer);
            } else {
                JOptionPane.showMessageDialog(null, "Invalid Admin Login");
            }

              
        }
            
            else if(role == "Professor"){
           // Professor professor=professorDirectory.searchProfessor(username);
             Optional<Professor> foundProfessor;
        foundProfessor = professorDirectory.getProfessorList().stream()
        .filter(person -> ((person.getUsername()== null ? userName == null : person.getUsername().equals(userName)) && (person.getPassword() == null ? password == null : person.isPasswordMatching(password)) ))
        .findFirst();
        if(foundProfessor.isEmpty()){
        
       JOptionPane.showMessageDialog(null, "Professor does not exist");
        }else{
              ProfessorHomePageJPanel panel = new ProfessorHomePageJPanel(workAreaContainer,foundProfessor.get(),professorDirectory,studentDirectory);
            workAreaContainer.add("ProfessorHomePageJPanel", panel);
            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
            layout.next(workAreaContainer);}
        }else if(role == "Student"){
             Optional<Student> foundStudent;
        foundStudent = studentDirectory.getStudentList().stream()
        .filter(student -> ((student.getUsername()== null ? userName == null : student.getUsername().equals(userName))  && (student.getPassword() == null ? password == null : student.isPasswordMatching(password))))
        .findFirst();
        if(foundStudent.isEmpty()){
        
       JOptionPane.showMessageDialog(null, "Student does not exist");
        }else{
            StudentHomePageJPanel panel = new StudentHomePageJPanel(workAreaContainer,foundStudent.get(),studentDirectory, professorDirectory);
            workAreaContainer.add("adminHomePageJPanel", panel);
            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
            layout.next(workAreaContainer);}
        }else if(role == "Employer"){
             Optional<EmployerModel> foundEmployer;
        foundEmployer = employerDirectory.getEmployerList().stream()
        .filter(person -> ((person.getUsername()== null ? userName == null : person.getUsername().equals(userName)) && (person.getPassword() == null ? password == null : person.isPasswordMatching(password)) ))
        .findFirst();
        if(foundEmployer.isEmpty()){
        
       JOptionPane.showMessageDialog(null, "Employer does not exist");
        }else{
            EmployerHomePageJPanel panel = new EmployerHomePageJPanel(workAreaContainer, studentDirectory, foundEmployer.get());
            workAreaContainer.add("AuthorityHomePageJPanel", panel);
            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
            layout.next(workAreaContainer);}
        }else {
          Optional<AuthorityModel> foundAuthority;
        foundAuthority = authorityDirectory.getAuthorityList().stream()
        .filter(person -> ((person.getUsername()== null ? userName == null : person.getUsername().equals(userName)) && (person.getPassword() == null ? password == null : person.isPasswordMatching(password)) ))
        .findFirst();
        if(foundAuthority.isEmpty()){
        
       JOptionPane.showMessageDialog(null, "Authority does not exist");
        }else{
             AuthorityHomePageJPanel panel = new AuthorityHomePageJPanel(workAreaContainer,studentDirectory,professorDirectory);
            workAreaContainer.add("AuthorityHomePageJPanel", panel);
            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
            layout.next(workAreaContainer);}
        }
    
    
//    // Check for Professor
//    if (role.equals("Professor")) {
//        Optional<Professor> foundProfessor = professorDirectory.getProfessorList().stream()
//            .filter(professor -> professor.getUsername() != null && professor.getUsername().equals(userName)
//                    && professor.getPassword() != null && professor.getPassword().equals(hashedPassword))
//            .findFirst();
//
//        if (foundProfessor.isPresent()) {
//            // Open Professor HomePage
//            // ...
//        } else {
//            JOptionPane.showMessageDialog(null, "Invalid login credentials for Professor.");
//        }
//    }
//
//    // Check for Student
//    if (role.equals("Student")) {
//        System.out.print(hashedPassword);
//        Optional<Student> foundStudent = studentDirectory.getStudentList().stream()
//            .filter(student -> student.getUsername() != null && student.getUsername().equals(userName)
//                    && student.getPassword() != null && student.getPassword().equals(hashedPassword))
//            .findFirst();
//
//        if (foundStudent.isPresent()) {
//            StudentHomePageJPanel panel = new StudentHomePageJPanel(workAreaContainer,foundStudent.get(),studentDirectory);
//            workAreaContainer.add("StudentHomePageJPanel", panel);
//            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
//            layout.next(workAreaContainer);}
//        } else {
//            JOptionPane.showMessageDialog(null, "Invalid login credentials for Student.");
//        }
//    
//
//    // Check for Employer
//    if (role.equals("Employer")) {
//        Optional<EmployerModel> foundEmployer = employerDirectory.getEmployerList().stream()
//            .filter(employer -> employer.getUsername() != null && employer.getUsername().equals(userName)
//                    && employer.getPassword() != null && employer.getPassword().equals(hashedPassword))
//            .findFirst();
//
//        if (foundEmployer.isPresent()) {
//            // Open Employer HomePage
//            // ...
//        } else {
//            JOptionPane.showMessageDialog(null, "Invalid login credentials for Employer.");
//        }
//    }
//
//    // Check for Authority
//    if (role.equals("3rd Party Authority")) {
//        Optional<AuthorityModel> foundAuthority = authorityDirectory.getAuthorityList().stream()
//            .filter(authority -> authority.getUsername() != null && authority.getUsername().equals(userName)
//                    && authority.getPassword() != null && authority.getPassword().equals(hashedPassword))
//            .findFirst();
//
//        if (foundAuthority.isPresent()) {
//            // Open Authority HomePage
//            // ...
//        } else {
//            JOptionPane.showMessageDialog(null, "Invalid login credentials for Authority.");
//        }
//    }

    }//GEN-LAST:event_btnLoginActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String role = (String) clRole.getSelectedItem();
        
        
        if(role == "Admin"){
            adminHomePageJPanel panel = new adminHomePageJPanel(workAreaContainer,professorDirectory,studentDirectory,employerDirectory, authorityDirectory);
            workAreaContainer.add("adminHomePageJPanel", panel);
            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
            layout.next(workAreaContainer);
        } else if(role == "Professor"){
        AdminCreateProfessorJPanel panel = new AdminCreateProfessorJPanel(workAreaContainer, professorDirectory);
        workAreaContainer.add("AdminCreateProfessorJPanel", panel);
        CardLayout layout = (CardLayout) workAreaContainer.getLayout();
        layout.next(workAreaContainer);
        } else if(role == "Student"){
        AdminCreateStudentJPanel panel = new AdminCreateStudentJPanel(workAreaContainer, studentDirectory);
        workAreaContainer.add("AdminCreateStudentJPanel", panel);
        CardLayout layout = (CardLayout) workAreaContainer.getLayout();
        layout.next(workAreaContainer);
        } else if(role == "Employer"){
          AdminCreateEmployer panel = new AdminCreateEmployer(workAreaContainer, employerDirectory);
            workAreaContainer.add("AdminCreateEmployer", panel);
            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
            layout.next(workAreaContainer);
        } else{
             AdminCreateAuthority panel = new AdminCreateAuthority(workAreaContainer,authorityDirectory);
            workAreaContainer.add("AdminCreateAuthority", panel);
            CardLayout layout = (CardLayout) workAreaContainer.getLayout();
            layout.next(workAreaContainer);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void clRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clRoleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clRoleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JComboBox<String> clRole;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private String hashPassword(String password) { 
        try {
            MessageDigest md;
            md = MessageDigest.getInstance("SHA");
            md.update(password.getBytes());
            byte[] rbt = md.digest();
            StringBuilder pass = new StringBuilder();

            for(byte b: rbt){
                pass.append(String.format("%02x", b));
               
            return pass.toString(); 
            } 
        } 
            catch (Exception ex) {  
        }
       return null;
        }

}
