/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Professor.ui;

import Business.Professor.model.Course;
import Business.Professor.model.CourseHistory;
import Business.Professor.model.Professor;
import Business.Professor.model.ProfessorDirectory;
import Business.Student.model.Student;
import Business.Student.model.StudentDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hemant
 */
public class StudentGradesJPanel extends javax.swing.JPanel {

    //This variable stores JPanel workAreaContainer
    private JPanel workAreaContainer;

    //This variable stores course history
    private CourseHistory courseHistory;

    //This variable stores professor
    private Professor professor;

    //This variable stores professorDirectory
    private ProfessorDirectory professorDirectory;

    //This variable stores student directory
    private StudentDirectory studentDirectory;

    /**
     * Creates new form StudentGradesJPanel
     */
    public StudentGradesJPanel(JPanel workAreaContainer, Professor professor, ProfessorDirectory professorDirectory, StudentDirectory studentDirectory) {
        initComponents();
        this.workAreaContainer = workAreaContainer;
        this.professor = professor;
        this.courseHistory = professor.getCourseHistory();
        this.professorDirectory = professorDirectory;
        this.studentDirectory = studentDirectory;
        populateStudentGrades();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourse = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnViewDetials = new javax.swing.JButton();
        txtSearchNuId = new javax.swing.JTextField();
        lblCourseName = new javax.swing.JLabel();
        lblCrn = new javax.swing.JLabel();
        txtCourseName = new javax.swing.JTextField();
        txtCrn = new javax.swing.JTextField();
        lblStartDate = new javax.swing.JLabel();
        txtGrade = new javax.swing.JTextField();
        btnSaveGrades = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 255));

        tblCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "NU ID", "Student Name", "Subject", "Course CRN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCourse);
        if (tblCourse.getColumnModel().getColumnCount() > 0) {
            tblCourse.getColumnModel().getColumn(0).setResizable(false);
            tblCourse.getColumnModel().getColumn(1).setResizable(false);
            tblCourse.getColumnModel().getColumn(2).setResizable(false);
            tblCourse.getColumnModel().getColumn(3).setResizable(false);
        }

        btnBack.setBackground(new java.awt.Color(255, 204, 204));
        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnViewDetials.setText("View Details");
        btnViewDetials.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetialsActionPerformed(evt);
            }
        });

        txtSearchNuId.setForeground(new java.awt.Color(204, 204, 204));

        lblCourseName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCourseName.setText("Name:");

        lblCrn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCrn.setText("CRN:");

        txtCourseName.setEnabled(false);

        txtCrn.setEnabled(false);

        lblStartDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblStartDate.setText("Grades:");

        btnSaveGrades.setText("Grade");
        btnSaveGrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveGradesActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Student Grades");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnViewDetials, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(130, 130, 130)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCourseName)
                                    .addComponent(lblStartDate)
                                    .addComponent(lblCrn)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearchNuId, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCrn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(btnSaveGrades, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(btnViewDetials, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchNuId, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCrn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCrn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCourseName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStartDate))
                .addGap(18, 18, 18)
                .addComponent(btnSaveGrades, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        workAreaContainer.remove(this);
        CardLayout layout = (CardLayout) workAreaContainer.getLayout();
        layout.previous(workAreaContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        //Validation part

        String nuId = txtSearchNuId.getText();
        
        if(nuId.isEmpty()){
            JOptionPane.showMessageDialog(null, "Please enter an NUID to search.");
            return;
        }
        Student result = studentDirectory.searchStudent(nuId);
        if(result == null){
            JOptionPane.showMessageDialog(null, "NUID does not exist.");
            return;
        }
        else{
            
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnViewDetialsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetialsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCourse.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showConfirmDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            txtCrn.setText((String) tblCourse.getValueAt(selectedRow, 3));
            txtCourseName.setText((String) tblCourse.getValueAt(selectedRow, 2));
        }
    }//GEN-LAST:event_btnViewDetialsActionPerformed

    private void btnSaveGradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveGradesActionPerformed
        int selectedRow = tblCourse.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showConfirmDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            Student student = (Student) tblCourse.getValueAt(selectedRow, 1);
            //student.addCompletedCoursesList();
            //student.addCourse(result.getCRN());
            String courseCrn = (String) tblCourse.getValueAt(selectedRow, 3);
            // ArrayList<Integer> commonElements = new ArrayList<>(student.getCoursesList());
//          commonElements.retainAll(professor.getCourseHistory().getCourseList().stream()
//    .map(Course::getCRN) // Extract the CRN from each Course object
//    .collect(Collectors.toList()));
            student.addCompletedCoursesList(courseCrn, txtGrade.getText());
            JOptionPane.showMessageDialog(null, "Student graded!", "Information", JOptionPane.INFORMATION_MESSAGE);
            
            txtCourseName.setText("");
            txtCrn.setText("");
            txtGrade.setText("");
        }
    }//GEN-LAST:event_btnSaveGradesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSaveGrades;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewDetials;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCourseName;
    private javax.swing.JLabel lblCrn;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JTable tblCourse;
    private javax.swing.JTextField txtCourseName;
    private javax.swing.JTextField txtCrn;
    private javax.swing.JTextField txtGrade;
    private javax.swing.JTextField txtSearchNuId;
    // End of variables declaration//GEN-END:variables

    private void populateStudentGrades() {
        DefaultTableModel dtm = (DefaultTableModel) tblCourse.getModel();
        dtm.setRowCount(0);

//         List<Integer> allStudents = studentDirectory.getStudentList().stream()
//                .flatMap(student -> student.getCoursesList().stream())
//                //.filter(course -> student.getCoursesList().stream().anyMatch( course.getCRN()))
//              //  .filter(course ->student.getCoursesList().contains(course.getCRN()))
////.filter(course -> (course.getCRN()==student.getCoursesList().get(0)))
//                .collect(Collectors.toList());
//         
//          ArrayList<Course> filteredCourses = (ArrayList<Course>) courseHistory.getCourseList().stream()
//                .filter(course -> allStudents.contains(course.getCRN()))
//                .collect(Collectors.toList());
//          
//          List<Integer> coursesTaughtByProfessor = professor.getCourseHistory().getCourseList().stream()
//        .map(Course::getCRN)
//        .collect(Collectors.toList());
//working
//          List<Course> coursesTaughtByProfessor = professor.getCourseHistory().getCourseList();
//          List<Student> students=new ArrayList<Student>();
//          for(Course course: coursesTaughtByProfessor){
//            students.addAll(course.getEnrolledStudents());
//            }
//working till here
//List<Student> studentsEnrolledInProfessorsCourses = studentDirectory.getStudentList().stream()
//        .filter(student -> student.getCoursesList().stream()
//                .anyMatch(course -> coursesTaughtByProfessor.contains(student.getCoursesList())))
//        .collect(Collectors.toList());
//List<Student> studentsEnrolledInProfessorsCourses = studentDirectory.getStudentList().stream()
//        .filter(student -> student.getCoursesList().stream()
//                .anyMatch(crn -> coursesTaughtByProfessor.contains(crn)))
//        .collect(Collectors.toList());
//working
//        for(Student student : students){
//            Object[] row = new Object[6];
//            row[0] = student.getNUID();
//            row[1] = student;
//            row[2] = student.getProgram();
//        //   row[3] = crn;
////            row[4] = student.getDay();
////            row[5] = student.getTime();
//            
//            dtm.addRow(row);
//        } 
        List<Course> coursesTaughtByProfessor = professor.getCourseHistory().getCourseList();
        List<Object[]> rows = new ArrayList<Object[]>();
        for (Course course : coursesTaughtByProfessor) {
            String courseName = course.toString();
            String courseCrn = Integer.toString(course.getCRN());
            for (Student student : course.getEnrolledStudents()) {
                Object[] row = new Object[6];
                row[0] = student.getNUID();
                row[1] = student;
                row[2] = courseName;
                row[3] = courseCrn;
                rows.add(row);
            }
        }

        for (Object[] row : rows) {
            dtm.addRow(row);
        }
    }
}
